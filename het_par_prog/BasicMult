#include    <wb.h>

#define wbCheck(stmt) do {                                 \
        cudaError_t err = stmt;                            \
        if (err != cudaSuccess) {                          \
            wbLog(ERROR, "Failed to run stmt ", #stmt);    \
            return -1;                                     \
        }                                                  \
    } while(0)

// Compute C = A * B
__global__ void matrixMultiply(float * A, float * B, float * C,
			       int numARows, int numAColumns,
			       int numBRows, int numBColumns,
			       int numCRows, int numCColumns) 
{
    //@@ Insert code to implement matrix multiplication here
	int l_idxC_i32 = threadIdx.x + blockDim.x * blockIdx.x;
	int l_idxR_i32 = threadIdx.y + blockDim.y * blockIdx.y;
	
	// the final value which is the product of a single row of input matrix A and a single column of input matrix B
	float l_finalValue_f32 = 0.0;
	
	// according to the video lectures
	int l_m_i32 = numARows;
	int l_n_i32 = numBRows;
	int l_k_i32 = numCColumns;
	
	if ( l_idxR_i32 < l_m_i32 && l_idxC_i32 < l_k_i32 )
	{
		for (int idx_i32 = 0; idx_i32 < l_n_i32; ++idx_i32)
		{
			l_finalValue_f32 += A[l_idxR_i32 * l_n_i32 + idx_i32] * B[idx_i32 * l_k_i32 + l_idxC_i32];
		}

		// store the final result in the output matrix
		C[l_idxR_i32 * l_k_i32 + l_idxC_i32] = l_finalValue_f32;
	}
}

int main(int argc, char ** argv) {
    wbArg_t args;
    float * hostA; // The A matrix
    float * hostB; // The B matrix
    float * hostC; // The output C matrix
    float * deviceA;
    float * deviceB;
    float * deviceC;
    int numARows; // number of rows in the matrix A
    int numAColumns; // number of columns in the matrix A
    int numBRows; // number of rows in the matrix B
    int numBColumns; // number of columns in the matrix B
    int numCRows; // number of rows in the matrix C (you have to set this)
    int numCColumns; // number of columns in the matrix C (you have to set this)

    args = wbArg_read(argc, argv);

    wbTime_start(Generic, "Importing data and creating memory on host");
    hostA = (float *) wbImport(wbArg_getInputFile(args, 0), &numARows, &numAColumns);
    hostB = (float *) wbImport(wbArg_getInputFile(args, 1), &numBRows, &numBColumns);
    
	//@@ Set numCRows and numCColumns
    numCRows = numARows;
    numCColumns = numBColumns;
    
	//@@ Allocate the hostC matrix
	hostC = (float *) malloc(numCRows * numCColumns * sizeof(float));
    wbTime_stop(Generic, "Importing data and creating memory on host");

    wbLog(TRACE, "The dimensions of A are ", numARows, " x ", numAColumns);
    wbLog(TRACE, "The dimensions of B are ", numBRows, " x ", numBColumns);
	wbLog(TRACE, "The dimensions of C are ", numCRows, " x ", numCColumns);

    wbTime_start(GPU, "Allocating GPU memory.");
    //@@ Allocate GPU memory here
	
	int l_sizeA_i32 = numARows * numAColumns * sizeof(float);		// compute required memory	
	wbCheck ( cudaMalloc( (void**)&deviceA, l_sizeA_i32 ) );		// reserve device memory for deviceA
	
	int l_sizeB_i32 = numBRows * numBColumns * sizeof(float);		// compute required memory	
	wbCheck ( cudaMalloc( (void**)&deviceB, l_sizeB_i32 ) );		// reserve device memory for deviceB
	
	int l_sizeC_i32 = numCRows * numCColumns * sizeof(float);		// compute required memory
	wbCheck ( cudaMalloc( (void**)&deviceC, l_sizeC_i32 ) );		// reserve device memory for deviceC

    wbTime_stop(GPU, "Allocating GPU memory.");

    wbTime_start(GPU, "Copying input memory to the GPU.");
    //@@ Copy memory to the GPU here
	
	cudaMemcpy( deviceA, hostA, l_sizeA_i32, cudaMemcpyHostToDevice );	// copy memory to device
	cudaMemcpy( deviceB, hostB, l_sizeB_i32, cudaMemcpyHostToDevice );	// copy memory to device

    wbTime_stop(GPU, "Copying input memory to the GPU.");
    
    //@@ Initialize the grid and block dimensions here
	dim3 DimGrid( (numCColumns-1) / 4.0 + 1,(numCRows-1) / 4.0 + 1,1);
	wbLog(TRACE, "Grid dimension x ", DimGrid.x, " y ", DimGrid.y);
	dim3 DimBlock(4, 4, 1);
	wbLog(TRACE, "Block dimension x ", DimBlock.x, " y ", DimBlock.y);
    
    wbTime_start(Compute, "Performing CUDA computation");
    //@@ Launch the GPU Kernel here
	
	matrixMultiply<<< DimGrid,DimBlock >>>(
		deviceA, deviceB, deviceC,
		numARows, numAColumns,
		numBRows, numBColumns,
		numCRows, numCColumns
	); // call kernel multiply function

    cudaThreadSynchronize();
    wbTime_stop(Compute, "Performing CUDA computation");
    
    wbTime_start(Copy, "Copying output memory to the CPU");
    //@@ Copy the GPU memory back to the CPU here
	
	cudaMemcpy( hostC, deviceC, l_sizeC_i32, cudaMemcpyDeviceToHost );	// copy memory from device to host

    wbTime_stop(Copy, "Copying output memory to the CPU");

    wbTime_start(GPU, "Freeing GPU Memory");
    //@@ Free the GPU memory here
	
	cudaFree( deviceA );
	cudaFree( deviceB );
	cudaFree( deviceC );

    wbTime_stop(GPU, "Freeing GPU Memory");

    wbSolution(args, hostC, numCRows, numCColumns);

    free(hostA);
    free(hostB);
    free(hostC);

    return 0;
}


